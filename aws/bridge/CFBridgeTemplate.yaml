AWSTemplateFormatVersion: '2010-09-09'
Description: SWAPI Stack Bridge CloudFormation Template

Resources:
  BridgeQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: BridgeQueue
      DelaySeconds: 0
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BridgeDLQ.Arn
        maxReceiveCount: 3

  BridgeDLQ:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: BridgeDLQ
      VisibilityTimeout: 60

  BridgeAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: BridgeAPI
  
  BridgeAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref BridgeAPI
      ParentId: !GetAtt BridgeAPI.RootResourceId
      PathPart: films
  
  BridgeAPIMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !GetAtt BridgeAPIResource.ResourceId
      RestApiId: !Ref BridgeAPI
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}
          - QueueName: !GetAtt BridgeQueue.QueueName
        Credentials: !GetAtt APIExecutionRole.Arn 
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        RequestTemplates:
          application/json: '{"Action": "SendMessage", "MessageBody": $input.body}'
        IntegrationResponses:
          - StatusCode: 200
     
  BridgeAPIDeploy:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - BridgeAPIMethod
    Properties:
      RestApiId: !Ref BridgeAPI
   
  BridgeAPIStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: BridgeAPIStage
      RestApiId: !Ref BridgeAPI
      DeploymentId:  !Ref BridgeAPIDeploy 
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
      AccessLogSetting:
        DestinationArn: !GetAtt BridgeAPILogs.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
  
  BridgeAPILogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref BridgeAPI
          - access-logs
  
  StackFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: StackFunction
      Runtime: python3.9
      Timeout: 60
      Handler: lambda_bridge.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: travel1s3bucket
        S3Key: lambda_bridge.zip
      DeadLetterConfig:
        TargetArn: !GetAtt BridgeDLQ.Arn
      Environment:
        Variables:
          QUEUE_URL: !GetAtt BridgeQueue.QueueUrl

  APIGatewayToSQSEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger StackFunction with SQS message on POST
      EventPattern:
        source:
          - aws.apigateway
        detail:
          eventName:
            - 'Invoke'
          requestContext:
            httpMethod:
              - POST
      Targets:
        - Arn: !GetAtt BridgeQueue.Arn
          Id: BridgeQueueTarget 

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: bridgecloudstack
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: swapi-bridge-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:PutLogEvents
                - logs:GetLogEvents
                - logs:FilterLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - sqs:* 
              Resource: "*"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: 
                - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function/StackFunction"
  
  APIExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: apiexecutionrole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: swapi-api-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action : "*"
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:PutLogEvents
                - logs:GetLogEvents
                - logs:FilterLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - sqs:*
              Resource: "*"

  BridgeDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: DLQAlarm
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Sum
      Threshold: 0
      AlarmDescription: Alarm when message in DLQ
      AlarmActions:
        - !Ref BridgeSNSTopic
      Dimensions:
        - Name: QueueName
          Value: !GetAtt BridgeDLQ.QueueName

  BridgeSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: BridgeSNSTopic

Outputs:
  StackFunction:
    Description: Stack Lambda Function Code Name
    Value: !Ref StackFunction
  
  BridgeQueue:
    Description: Bridge SQS Queue 
    Value: !GetAtt BridgeQueue.QueueUrl

  BridgeSNSTopic:
    Description: Bridge SNS Topic Notification
    Value: !Ref BridgeSNSTopic
  BridgeAPI:
    Description: BridgeAPI Gateway Endpoint
    Value: !Sub "https://${BridgeAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/films"