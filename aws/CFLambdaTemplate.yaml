AWSTemplateFormatVersion: '2010-09-09'
Description: SWAPI Stack CloudFormation Template

Parameters:
  SWAPIFunctionCode:
    Description: SWAPIFunction Code
    Type: String
    Default: lambda_function.zip

Resources:
  SWAPIBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: swapistackbucket

  SWAPIQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: swapistackqueue
      DelaySeconds: 0
      VisibilityTimeout: 230
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InvalidQueue.Arn
        maxReceiveCount: 3

  InvalidQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "InvalidQueue"
      VisibilityTimeout: 30

  StackAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: StackAPI

  SQSLambdaTrigger:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SQSLambdaTrigger
      Runtime: python3.9
      Timeout: 230
      Handler: lambda_sqs_trigger.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: travel1s3bucket
        S3Key: lambda_sqs_trigger.zip

  SWAPIFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SWAPIFunction
      Runtime: python3.9
      Timeout: 230
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: travel1s3bucket
        S3Key: !Ref SWAPIFunctionCode

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: swapicloudstack
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: swapi-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:PutLogEvents
                - logs:GetLogEvents
                - logs:FilterLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - sqs:* 
              Resource: !GetAtt SWAPIQueue.Arn
            - Effect: Allow
              Action: 
                - cloudformation:CreateStack
                - cloudformation:DeleteStack
                - cloudformation:UpdateStack
                - cloudformation:DescribeStacks
                - cloudformation:CreateChangeSet
                - cloudformation:DescribeChangeSet
                - cloudformation:DeleteChangeSet
                - cloudformation:ExecuteChangeSet
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject  
                - s3:PutObject
                - s3:PutObjectAcl
              Resource:
                Fn::Sub:
                  - arn:aws:s3:::${BucketName}/*
                  - BucketName: !Ref SWAPIBucket
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: 
                - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function/SWAPI_Function"
                - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function/SQSLambdaTrigger"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/AWSLambda_FullAccess

  StackAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref StackAPI
      ParentId: !GetAtt StackAPI.RootResourceId
      PathPart: films
  
  StackAPIMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !GetAtt StackAPIResource.ResourceId
      RestApiId: !Ref StackAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SQSLambdaTrigger.Arn}/invocations"

  SWAPIStackAPIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SQSLambdaTrigger.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StackAPI}/*/POST/films"

  SWAPIStackAPIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SQSLambdaTrigger.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StackAPI}/*/POST/films"

  SWAPIFunctionSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SWAPIFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SWAPIQueue.Arn
   
  StackAPIDeploy:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref StackAPI
   
  StackAPIStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: StackAPIStage
      RestApiId: !Ref StackAPI
      DeploymentId:  !Ref StackAPIDeploy 

  LambdaToSQSTrigger:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SWAPIQueue.Arn
      FunctionName: !Ref SWAPIFunction

Outputs:
  SWAPIFunction:
    Description: SWAPIStack Function Code Name
    Value: !Ref SWAPIFunction

  SQSLambdaTrigger:
    Description: SWAPIStack Function Code with SQS to Trigger Lambda
    Value: !Ref SQSLambdaTrigger
  
  SWAPIQueue:
    Description: SWAPI SQS Queue
    Value: !GetAtt SWAPIQueue.QueueUrl

  SWAPIBuket:
    Description: SWAPI S3 Bucket
    Value:
      Ref: SWAPIBucket

  SWAPIFunctionCode:
    Description: LambdaFunctionCode Key
    Value: !Ref SWAPIBucket
 
  StackAPI:
    Description: API Gateway Endpoint
    Value: !Sub "https://${StackAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/films"