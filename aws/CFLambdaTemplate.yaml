AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Lambda, SQS, and S3

Parameters:
  S3KeyName:
    Description: Name of the S3 key for Lambda code
    Type: String
    Default: lambda_function.zip

Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: swapibucket1

  MySQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: swapiqueue

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: SWAPI

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SWAPIFunction
      Runtime: python3.9
      Timeout: 230
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        S3Bucket: travel1s3bucket
        S3Key: !Ref S3KeyName
      Environment:
        Variables:
          SQS_QUEUE_URL:
            Fn::GetAtt:
              - MySQSQueue
              - QueueUrl

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: swapicloudstack
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: swapi-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 'arn:aws:logs:*:*:*'
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:GetQueueAttributes
                - sqs:DeleteMessage
              Resource:
                Fn::GetAtt:
                  - MySQSQueue
                  - Arn
            - Effect: Allow
              Action: 
                - cloudformation:CreateStack
                - cloudformation:DeleteStack
                - cloudformation:UpdateStack
                - cloudformation:DescribeStacks
                - cloudformation:CreateChangeSet
                - cloudformation:DescribeChangeSet
                - cloudformation:DeleteChangeSet
                - cloudformation:ExecuteChangeSet
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject  # Added permission to get the S3 object
                - s3:PutObject
                - s3:PutObjectAcl
              Resource:
                Fn::Sub:
                  - arn:aws:s3:::${BucketName}/*
                  - BucketName: !Ref MyS3Bucket
  
  MyApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - MyApiGateway
          - Id     
      RestApiId:
        Ref: MyApiGateway
      PathPart: 'films'
  
  MyApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId:
        Fn::GetAtt:
          - MyApiResource
          - Id
      RestApiId:
        Ref: MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations

Outputs:
  LambdaFunctionName:
    Description: Name of the created Lambda function
    Value:
      Ref: MyLambdaFunction

  SQSQueueURL:
    Description: URL of the created SQS queue
    Value:
      Fn::GetAtt:
        - MySQSQueue
        - QueueUrl

  S3BucketName:
    Description: Name of the created S3 bucket
    Value:
      Ref: MyS3Bucket

  S3ObjectKey:
    Description: Key of the uploaded S3 object
    Value: !Ref S3KeyName
 
  ApiGatewayEndpoint:
    Description: Endpoint URL of the API Gateway
    Value:
      Fn::Sub: "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/movies"